msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2015-05-12 20:15+0200\n"
"PO-Revision-Date: 2015-05-16 19:27+0100\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"Language: en_US\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.7.5\n"

msgid "The buildscript"
msgstr "Das Buildscript"

msgid "<primary>The Buildscript</primary>"
msgstr "<primary>Das Buildscript</primary>"

msgid "The small <filename>Rakefile</filename> script will be placed in each new documentation project, directly under title/language/. The buildscript matches the most common documentation targets like: docx, odt, rtf, wml, pdf, html, man, txt, epub and eclipse."
msgstr "Das kleine <filename>Rakefile</filename> Script wird in jeder neuen Dokumentation angelegt (direkt unter titel/sprache). Es kann den Bau der Formate docx, odt, rtf, wml, pdf, html, man, txt, epub und eclipse erleichtern."

msgid "The export to docx, odt, rtf and wml only working if the <link xlink:href=\"http://www.xmlmind.com/foconverter/\">XMLMind Foconverter (XFC) </link> is installed and a brand (a own brand or the default brand) is installed. Also the <quote>fo2*</quote> scripts should be soft linked to /usr/bin or the path is placed in $PATH."
msgstr "Der Export nach docx, odt, rtf und wml funktioniert nur, wenn der <link xlink:href=\"http://www.xmlmind.com/foconverter/\">XMLMind Foconverter (XFC)</link> installiert ist, die <quote>fo2*</quote> in /usr/bin oder in $PATH liegen, und ein Brand gesetzt ist. Hierbei kann es sich um einen angepassten Brand handeln, oder um den Standard fo/docbook.xsl."

msgid "All other targets like pdf, html, man, txt, epub and eclipse are publican's own targets."
msgstr "Alle anderen Exporte wie pdf, html, man, txt, epub and eclipse kann Publican selbst bedienen."

msgid "The targets will be built into tmp/language/format (e.g. tmp/de-DE/docx). The placeholders (like language) will be solved by producing a new documentation.,"
msgstr "Die Exporte werden in tmp/sprache/format (z.B. tmp/de-DE/docx) gespeichert. "

msgid "You can integrate the build script in some XML-IDE's. In case of Oxygen XML you can add a external tool with the parameters:"
msgstr "Das Exportscript kann in manche XML-IDE's (wie z.B. Oxygen XML) als externes Tool integriert werden."

msgid "Settings for a external pdf tool"
msgstr "Einstellungen für Oxygen"

msgid "<emphasis role=\"bold\">Workdir</emphasis>: {cfd}"
msgstr ""

msgid "<emphasis role=\"bold\">Command line</emphasis>: rake export_pdf"
msgstr ""

msgid "Because the build script is named in each project with the same name it is usable from the IDE. In the same way you can add the two shipped binaries <filename>/usr/bin/publicancreators</filename> and <filename>/usr/bin/publicancreators-dev</filename>."
msgstr "Da das Buildscript in jedem Projekt gleich heißt, kann es von der IDE bequem angesteuert werden. Die beiden Dateien <filename>/usr/bin/publicancreators</filename> und <filename>/usr/bin/publicancreators-dev</filename> können ebenfalls beliebig integriert werden."

msgid "The <filename>Rakefile</filename> looks like:"
msgstr "Das <filename>Rakefile</filename>  sieht wie folgt aus:"

msgid ""
"# -*- ruby -*-\n"
"      # encoding: utf-8\n"
"      require 'fileutils'\n"
"\n"
"      task :default do\n"
"      puts 'usage: rake [export_docx] [export_odt] [export_rtf] [export_wml] [export_pdf] [export_html] [export_man]\n"
"      [export_txt] [export_txt] [export_epub]'\n"
"      puts\n"
"      puts 'Options:'\n"
"      puts 'export_docx : Export DocBook source to DOCX'\n"
"      puts ' Example: rake export_docx'\n"
"      puts 'export_odt : Export DocBook source to ODT'\n"
"      puts ' Example: rake export_odt'\n"
"      puts 'export_rtf : Export DocBook source to RTF'\n"
"      puts ' Example: rake export_rtf'\n"
"      puts 'export_wml: Export DocBook source to WML'\n"
"      puts ' Example: rake export_wml'\n"
"      puts 'export_pdf: Export Docbook source to PDF'\n"
"      puts ' Example: rake export_pdf'\n"
"      puts 'export_html: Export DocBook source to HTML'\n"
"      puts ' Example: rake export_html'\n"
"      puts 'export_man: Export DocBook source to MAN'\n"
"      puts ' Example: rake export_man'\n"
"      puts 'export_txt: Export DocBook source to TXT'\n"
"      puts ' Example: rake export_txt'\n"
"      puts 'export_epub: Export DocBook source to EPUB'\n"
"      puts ' Example: rake export_epub'\n"
"      puts 'export_eclipse: Export DocBook source to Eclipse Help'\n"
"      puts ' Example: rake export_eclipse'\n"
"      end\n"
"\n"
"      require 'dir'\n"
"      require 'fileutils'\n"
"      desc 'Checks if temp dir is available. Otherwise it creates it'\n"
"      task :checker do\n"
"      todos = \"../tmp/#{language}/docx\"\n"
"      if Dir.exist?(todos)\n"
"      puts 'Found directory. Im using it.'\n"
"      else\n"
"      puts 'No directory found. Im creating it.'\n"
"      FileUtils.mkdir_p(todos)\n"
"      end\n"
"      todos = \"../tmp/#{language}/odt\"\n"
"      if Dir.exist?(todos)\n"
"      puts 'Found directory. Im using it.'\n"
"      else\n"
"      puts 'No directory found. Im creating it.'\n"
"      FileUtils.mkdir_p(todos)\n"
"      end\n"
"      todos = \"../tmp/#{language}/rtf\"\n"
"      if Dir.exist?(todos)\n"
"      puts 'Found directory. Im using it.'\n"
"      else\n"
"      puts 'No directory found. Im creating it.'\n"
"      FileUtils.mkdir_p(todos)\n"
"      end\n"
"      todos = \"../tmp/#{language}/wml\"\n"
"      if Dir.exist?(todos)\n"
"      puts 'Found directory. Im using it.'\n"
"      else\n"
"      puts 'No directory found. Im creating it.'\n"
"      FileUtils.mkdir_p(todos)\n"
"      end\n"
"      end\n"
"\n"
"      end\n"
"\n"
"      desc 'Convert to DOCX'\n"
"      task :export_docx =&gt; [:checker] do\n"
"      puts 'Resolving all XML-Entities and XI-Includes'\n"
"      system(\"xmllint --noent --dropdtd --xinclude #{title}.xml -o #{title}-resolved.xml\")\n"
"      puts 'Formatting XML to XSL-FO'\n"
"      system(\"saxon-xslt -o #{title}.fo #{title}-resolved.xml #{xfc_brand_dir}\")\n"
"      puts 'Removing temporary resolved file'\n"
"      FileUtils.rm('#{title}-resolved.xml')\n"
"      puts 'Transforming to DOCX'\n"
"      system(\"fo2docx #{title}.fo &gt; ../tmp/#{language}/docx/#{title}.docx\")\n"
"      puts 'Launching LibreOffice Writer for Preview'\n"
"      system(\"lowriter ../tmp/#{language}/docx/#{title}.docx &amp;\")\n"
"      end\n"
"\n"
"      desc 'Convert to ODT'\n"
"      task :export_odt =&gt; [:checker] do\n"
"      puts 'Resolving all XML-Entities and XI-Includes'\n"
"      system(\"xmllint --noent --dropdtd --xinclude #{title}.xml -o #{title}-resolved.xml\")\n"
"      puts 'Formatting XML to XSL-FO'\n"
"      system(\"saxon-xslt -o #{title}.fo #{title}-resolved.xml #{xfc_brand_dir}\")\n"
"      puts 'Removing temporary resolved file'\n"
"      FileUtils.rm('#{title}-resolved.xml')\n"
"      puts 'Transforming to ODT'\n"
"      system(\"fo2odt #{title}.fo &gt; ../tmp/#{language}/odt/#{title}.odt\")\n"
"      puts 'Launching LibreOffice Writer for Preview'\n"
"      system(\"lowriter ../tmp/#{language}/odt/#{title}.odt &amp;\")\n"
"      end\n"
"\n"
"      desc 'Convert to RTF'\n"
"      task :export_rtf =&gt; [:checker] do\n"
"      puts 'Resolving all XML-Entities and XI-Includes'\n"
"      system(\"xmllint --noent --dropdtd --xinclude #{title}.xml -o #{title}-resolved.xml\")\n"
"      puts 'Formatting XML to XSL-FO'\n"
"      system(\"saxon-xslt -o #{title}.fo #{title}-resolved.xml #{xfc_brand_dir}\")\n"
"      puts 'Removing temporary resolved file'\n"
"      FileUtils.rm('#{title}-resolved.xml')\n"
"      puts 'Transforming to RTF'\n"
"      system(\"fo2rtf #{title}.fo &gt; ../tmp/#{language}/rtf/#{title}.rtf\")\n"
"      puts 'Launching LibreOffice Writer for Preview'\n"
"      system(\"lowriter ../tmp/#{language}/rtf/#{title}.rtf &amp;\")\n"
"      end\n"
"\n"
"      desc 'Convert to WML'\n"
"      task :export_wml =&gt; [:checker] do\n"
"      puts 'Resolving all XML-Entities and XI-Includes'\n"
"      system(\"xmllint --noent --dropdtd --xinclude #{title}.xml -o #{title}-resolved.xml\")\n"
"      puts 'Formatting XML to XSL-FO'\n"
"      system(\"saxon-xslt -o #{title}.fo #{title}-resolved.xml #{xfc_brand_dir}\")\n"
"      puts 'Removing temporary resolved file'\n"
"      FileUtils.rm('#{title}-resolved.xml')\n"
"      puts 'Transforming to WML'\n"
"      system(\"fo2wml #{title}.fo &gt; ../tmp/#{language}/wml/#{title}.wml\")\n"
"      end\n"
"\n"
"      desc 'Convert to PDF'\n"
"      task :export_pdf do\n"
"      FileUtils.cd('..')\n"
"      puts 'Cleaning up temp directory'\n"
"      system('publican clean')\n"
"      puts 'Formatting to PDF'\n"
"      system('publican build --langs=#{language} --formats=pdf --allow_network')\n"
"      puts 'Launching PDF-Viewer'\n"
"      system('#{pdfview} tmp/#{language}/pdf/*.pdf &amp;')\n"
"      end\n"
"\n"
"      desc 'Convert to HTML'\n"
"      task :export_html do\n"
"      FileUtils.cd('..')\n"
"      puts 'Cleaning up temp directory'\n"
"      system('publican clean')\n"
"      puts 'Formatting to PDF'\n"
"      system('publican build --langs=#{language} --formats=html --allow_network')\n"
"      puts 'Launching Browser'\n"
"      system('firefox tmp/#{language}/html/index.html &amp;')\n"
"      end\n"
"\n"
"      desc 'Convert to MAN'\n"
"      task :export_man do\n"
"      FileUtils.cd('..')\n"
"      puts 'Cleaning up temp directory'\n"
"      system('publican clean')\n"
"      puts 'Formatting to MAN'\n"
"      system('publican build --langs=#{language} --formats=man --allow_network')\n"
"      end\n"
"\n"
"      desc 'Convert to TXT'\n"
"      task :export_txt do\n"
"      FileUtils.cd('..')\n"
"      puts 'Cleaning up temp directory'\n"
"      system('publican clean')\n"
"      puts 'Formatting to TXT'\n"
"      system('publican build --langs=#{language} --formats=txt --allow_network')\n"
"      puts 'Launching Texteditor'\n"
"      system('gedit tmp/#{language}/txt/*.txt &amp;')\n"
"      end\n"
"\n"
"      desc 'Convert to EPUB'\n"
"      task :export_epub do\n"
"      FileUtils.cd('..')\n"
"      puts 'Cleaning up temp directory'\n"
"      system('publican clean')\n"
"      puts 'Formatting to EPUB'\n"
"      system('publican build --langs=#{language} --formats=epub --allow_network')\n"
"      if File.exist?('/usr/bin/ebook-viewer')\n"
"      puts 'Launching EPUB-Viewer'\n"
"      system('ebook-viewer /tmp/#{language}/*.epub &amp;')\n"
"      else\n"
"      puts 'You have to install calibre for using ebook-viewer for preview'\n"
"      end\n"
"      end\n"
"\n"
"      desc 'Convert to ECLIPSE'\n"
"      task :export_eclipse do\n"
"      FileUtils.cd('..')\n"
"      puts 'Cleaning up temp directory'\n"
"      system('publican clean')\n"
"      puts 'Formatting to ECLIPSE'\n"
"      system('publican build --langs=#{language} --formats=eclipse --allow_network')\n"
"      end\n"
"\n"
"      desc 'Run convert to most used formats'\n"
"      task :export_most =&gt; [:export_docx, :export_odt, :export_rtf, :export_html, :export_pdf] do\n"
"      puts 'Successful exported to DOCX, ODT, RTF, HTML and PDF'\n"
"      end\n"
"\n"
"      desc 'Run convert to all formats'\n"
"      task :export_all =&gt; [:export_most, :export_wml, :export_man, :export_txt, :export_epub, :export_eclipse] do\n"
"      puts 'Successfull exported to all formats'\n"
"      end\n"
"    "
msgstr ""

