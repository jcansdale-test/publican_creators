msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2015-05-12 20:15+0200\n"
"PO-Revision-Date: 2015-05-12 22:47+0100\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"Language: en_US\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.7.5\n"

msgid "The build.sh script"
msgstr "Das Buildscript (build.sh)"

msgid "The small <filename>build.sh</filename> script will be placed in each new documentation project, directly under title/language/. The buildscript matches the most common documentation targets like: docx, odt, rtf, wml, pdf, html, man, txt, epub and eclipse."
msgstr "Das kleine <filename>build.sh</filename> Script wird in jeder neuen Dokumentation angelegt (direkt unter titel/sprache). Es kann den Bau der Formate docx, odt, rtf, wml, pdf, html, man, txt, epub und eclipse erleichtern."

msgid "The export to docx, odt, rtf and wml only working if the <link xlink:href=\"http://www.xmlmind.com/foconverter/\">XMLMind Foconverter (XFC) </link> is installed and a brand (a own brand or the default brand) is installed. Also the <quote>fo2*</quote> scripts should be soft linked to /usr/bin or the path is placed in $PATH."
msgstr "Der Export nach docx, odt, rtf und wml funktioniert nur, wenn der <link xlink:href=\"http://www.xmlmind.com/foconverter/\">XMLMind Foconverter (XFC) </link> installiert ist, die <quote>fo2*</quote> in /usr/bin oder in $PATH liegen, und ein Brand gesetzt ist. Hierbei kann es sich um einen angepassten Brand handeln, oder um den Standard fo/docbook.xsl."

msgid "All other targets like pdf, html, man, txt, epub and eclipse are publican's own targets."
msgstr "Alle anderen Exporte wie pdf, html, man, txt, epub and eclipse kann Publican selbst bedienen."

msgid "The targets will be built into tmp/language/format (e.g. tmp/de-DE/docx). The placeholders (like language) will be solved by producing a new documentation.,"
msgstr "Die Exporte werden in tmp/sprache/format (z.B. tmp/de-DE/docx) gespeichert. "

msgid "You can integrate the build script in some XML-IDE's. In case of Oxygen XML you can add a external tool with the parameters:"
msgstr "Das Exportscript kann in manche XML-IDE's (wie z.B. Oxygen XML) als externes Tool integriert werden."

msgid "Settings for a external pdf tool"
msgstr "Einstellungen für Oxygen"

msgid "Workdir: {cfd}"
msgstr ""

msgid "Command line: ${cfd}/build.sh -pdf"
msgstr ""

msgid "Because the build script is named in each project with the same name it is usable from the IDE. In the same way you can add the two shipped binaries <filename>/usr/bin/publicancreators</filename> and <filename>/usr/bin/publicancreators-dev</filename>."
msgstr "Da das Buildscript in jedem Projekt gleich heißt, kann es von der IDE bequem angesteuert werden. Die beiden Dateien <filename>/usr/bin/publicancreators</filename> und <filename>/usr/bin/publicancreators-dev</filename> können ebenfalls beliebig integriert werden."

msgid "The <filename>build.sh</filename> looks like:"
msgstr "Das Buildscript sieht wie folgt aus:"

msgid ""
"#!/bin/bash\n"
"# Description: This script builds PDF, DOCX, ODT, RTF, HTML, MAN, TXT, EPUB and WML\n"
"# Usage: $0 [-docx] [-odt] [-rtf] [-wml] [-pdf] [-html] [-man] [-txt] [-epub] [-eclipse]\n"
"# Version:\n"
"# 0.1 initial version\n"
"# Functions\n"
"usage() {\n"
"echo \"usage: $0 [-docx] [-odt] [-rtf] [-wml] [-pdf] [-html] [-man] [-txt] [-epub] [-eclipse]\"\n"
"echo\n"
"echo \"Options: \"\n"
"echo \"-docx : Export DocBook source to DOCX\"\n"
"echo \" Example: $0 -docx\"\n"
"echo \"-odt : Export DocBook source to ODT\"\n"
"echo \" Example: $0 -odt\"\n"
"echo \"-rtf : Export DocBook source to RTF\"\n"
"echo \" Example: $0 -rtf\"\n"
"echo \"-wml: Export DocBook source to WML\"\n"
"echo \" Example: $0 -wml\"\n"
"echo \"-pdf: Export Docbook source to PDF\"\n"
"echo \" Example: $0 -pdf\"\n"
"echo \"-html: Export DocBook source to HTML\"\n"
"echo \" Example: $0 -html\"\n"
"echo \"-man: Export DocBook source to MAN\"\n"
"echo \" Example: $0 -man\"\n"
"echo \"-txt: Export DocBook source to TXT\"\n"
"echo \" Example: $0 -txt\"\n"
"echo \"-epub: Export DocBook source to EPUB\"\n"
"echo \" Example: $0 -epub\"\n"
"echo \" -eclipse: Export DocBook source to Eclipse\"\n"
"echo \" Example: $0 -eclipse\n"
"exit 1\n"
"}\n"
"\n"
"# main\n"
"case \"$1\" in\n"
"   -docx)\n"
"      echo \"Solve all XML-Entities and XI-Includes\"\n"
"      xmllint --noent --dropdtd --xinclude #{title}.xml -o #{title}-resolved.xml\n"
"      echo \"Formatting XML to XSL-FO\"\n"
"      if [ -d ../tmp/#{language}/docx ]\n"
"      then\n"
"      echo \"Found tempdir\"\n"
"      else\n"
"      mkdir ../tmp/#{language}/docx\n"
"      end\n"
"      saxon-xslt -o ../tmp/#{language}/docx/#{title}.fo #{title}-resolved.xml #{xfc_brand_dir}\n"
"      rm #{title}-resolved.xml\n"
"      echo \"Transforming to DOCX\"\n"
"      fo2docx ../tmp/#{language}/docx/#{title}.fo &gt; ../tmp/#{language}/docx/#{title}.docx\n"
"      echo \"Launching LibreOffice Writer\"\n"
"      lowriter ../tmp/#{language}/docx/#{title}.docx &amp;\n"
"      ;;\n"
"    -odt)\n"
"      echo \"Solve all XML-Entities and XI-Includes\"\n"
"      xmllint --noent --dropdtd --xinclude #{title}.xml -o #{title}-resolved.xml\n"
"      echo \"Formatting XML to XSL-FO\"\n"
"      if [ -d ../tmp/#{language}/odt ]\n"
"      then\n"
"      echo \"Found tempdir\"\n"
"      else\n"
"      mkdir ../tmp/#{language}/odt\n"
"      end\n"
"      saxon-xslt -o ../tmp/#{language}/odt/#{title}.fo #{title}-resolved.xml #{xfc_brand_dir}\n"
"      rm #{title}-resolved.xml\n"
"      echo \"Transforming to ODT\"\n"
"      fo2odt ../tmp/#{language}/odt/#{title}.fo &gt; ../tmp/#{language}/odt/#{title}.odt\n"
"      echo \"Starting LibreOffice Writer\"\n"
"      lowriter ../tmp/#{language}/odt/#{title}.odt &amp;\n"
"      ;;\n"
"    -rtf)\n"
"      echo \"Solve all XML-Entities and XI-Includes\"\n"
"      xmllint --noent --dropdtd --xinclude #{title}.xml -o #{title}-resolved.xml\n"
"      echo \"Formatting XML to XSL-FO\"\n"
"      if [ -d ../tmp/#{language}/rtf ]\n"
"      then\n"
"      echo \"Found tempdir\"\n"
"      else\n"
"      mkdir ../tmp/#{language}/rtf\n"
"      end\n"
"      saxon-xslt -o ../tmp/#{language}/rtf/#{title}.fo #{title}-resolved.xml #{xfc_brand_dir}\n"
"      rm #{title}-resolved.xml\n"
"      echo \"Transforming to RTF\"\n"
"      fo2rtf ../tmp/#{language}/rtf/#{title}.fo &gt; ../tmp/#{language}/rtf/#{title}.rtf\n"
"      echo \"Launching LibreOffice Writer\"\n"
"      lowriter ../tmp/#{language}/rtf/#{title}.rtf &amp;\n"
"      ;;\n"
"    -wml)\n"
"      echo \"Solve all XML-Entities and XI-Includes\"\n"
"      xmllint --noent --dropdtd --xinclude #{title}.xml -o #{title}-resolved.xml\n"
"      echo \"Formatting XML to XSL-FO\"\n"
"      if [ -d ../tmp/#{language}/wml ]\n"
"      then\n"
"      echo \"Found tempdir\"\n"
"      else\n"
"      mkdir ../tmp/#{language}/wml\n"
"      end\n"
"      saxon-xslt -o ../tmp/#{language}/wml/#{title}.fo #{title}-resolved.xml #{xfc_brand_dir}\n"
"      rm #{title}-resolved.xml\n"
"      echo \"Transforming to WML\"\n"
"      fo2wml ../tmp/#{language}/wml/#{title}.fo &gt; ../tmp/#{language}/wml/#{title}.wml\n"
"      echo \"Launching LibreOffice Writer\"\n"
"      lowriter ../tmp/#{language}/wml/#{title}.wml &amp;\n"
"      ;;\n"
"    -pdf)\n"
"      cd ..\n"
"      echo \"Cleanup temp directory\"\n"
"      publican clean\n"
"      echo \"Formatting DocBook dokument and rendering to PDF\"\n"
"      publican build --langs=#{language} --formats=pdf --allow_network\n"
"      echo \"Launching PDF-Viewer\"\n"
"      #{pdfview} tmp/de-DE/pdf/*.pdf &amp;\n"
"      ;;\n"
"    -html)\n"
"      cd ..\n"
"      echo \"Cleanup temp directory\"\n"
"      publican clean\n"
"      echo \"Formatting DocBook dokument and rendering to HTML\"\n"
"      publican build --langs=#{language} --formats=html --allow_network\n"
"      echo \"Launching Browser\"\n"
"      firefox tmp/de-DE/html/index.html &amp;\n"
"      ;;\n"
"    -man)\n"
"      cd ..\n"
"      echo \"Cleanup temp directory\"\n"
"      publican clean\n"
"      echo \"Formatting DocBook document to MAN\"\n"
"      publican build --langs=#{language} --formats=man --allow_network\n"
"      ;;\n"
"    -txt)\n"
"      cd ..\n"
"      echo \"Cleanup temp directory\"\n"
"      publican clean\n"
"      echo \"Formatting DocBook document to TXT\"\n"
"      publican build --langs=#{language} --formats=txt --allow_network\n"
"      echo \"Launching Texteditor\"\n"
"      gedit tmp/de-DE/txt/*.txt &amp;\n"
"      ;;\n"
"    -epub)\n"
"      cd ..\n"
"      echo \"Cleanup temp directory\"\n"
"      publican clean\n"
"      echo \"Formatting and rendering DocBook document to EPUB\"\n"
"      publican build --langs=#{language} --formats=epub --allow_network\n"
"      echo \"Launching EPUB-Viewer\"\n"
"      ev=`which ebook-viewer`\n"
"      if [ \"$ev\"]\n"
"      ebook-viewer tmp/de-DE/*.epub &amp;\n"
"      else\n"
"      echo \"You need to install calibre for preview the result!\"\n"
"      fi\n"
"      ;;\n"
"    -eclipse)\n"
"      cd ..\n"
"      echo \"Cleanup temp directory\"\n"
"      publican clean\n"
"      echo \"Formatting to ECLIPSE\"\n"
"      publican build --langs=#{language} --formats=eclipse --allow_network\n"
"      ;;\n"
"    *)\n"
"      usage\n"
"esac\n"
"exit 0\n"
"    "
msgstr ""
